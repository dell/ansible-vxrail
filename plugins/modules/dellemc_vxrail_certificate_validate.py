#!/usr/bin/python
# Copyright 2021 Dell Inc. or its subsidiaries. All Rights Reserved


# Copyright: (c) 2018, Terry Jones <terry.jones@example.org>
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)
from __future__ import (absolute_import, division, print_function)
__metaclass__ = type

DOCUMENTATION = r'''
---
module: dellemc_vxrail_certificate_validate

short_description: Verify the VxRail Manager certificate

# If this is part of a collection, you need to use semantic versioning,
# i.e. the version is of the form "2.5.0" and not "2.4".
version_added: "1.4.0"

description:
- This module will verify the VxRail Manager certificate
options:

  vxmip:
    description:
      The IP address of the VxRail Manager System
    required: True
    type: str

  vcadmin:
    description:
      Administrative account of the vCenter Server the VxRail Manager is registered to
    required: True
    type: str

  vcpasswd:
    description:
      The password for the administrator account provided in vcadmin
    required: True
    type: str

  cert:
    description:
      Content of the new certificate in PEM format. Each line should be followed by an escape character "\n".
    required: True
    type: str

  root_cert_chain:
    description:
      Contents of the certificate chain in PEM format. The root CA certificate comes first, followed by the intermediate CA certificates (if any).
    required: True
    type: list
    elements: str

  private_key:
    description:
      Contents of the private key in PEM format. Only an RSA private key is allowed.
      The private key can be omitted if the provided certificate is issued based on the CSR generated by /v1/certificates/csr.
    required: False
    type: str

  password:
    description:
      Password for the new .pfx file.
    required: False
    type: str

  api_version_number:
    description:
      A specific version number to use for the API call. If not included, will use the highest version by default
    required: False
    type: int

author:
    - VxRail Development Team(@VxRailDevTeam) <ansible.team@dell.com>

'''

EXAMPLES = r'''
  - name: Verify the VxRail Manager certificate
    dellemc_vxrail_certificate_validate:
        vxmip: "{{ vxmip }}"
        vcadmin: "{{ vcadmin }}"
        vcpasswd: "{{ vcpasswd }}"
        cert: "{{ cert }}"
        root_cert_chain: "{{ root_cert_chain }}"
        private_key: "{{ private_key }}"
        password: "{{ password }}"
        api_version_number: "{{ api_version_number }}"
'''

RETURN = r'''
certificate_validate_information:
  description: Return the the validation result.
  returned: always
  type: dict
  sample: >-
    {
        "msg": "Validate certificate successfully"
    }
'''

import logging
import urllib3
from ansible.module_utils.basic import AnsibleModule
import vxrail_ansible_utility
from vxrail_ansible_utility.rest import ApiException
from ansible_collections.dellemc.vxrail.plugins.module_utils import dellemc_vxrail_ansible_utils as utils

LOGGER = utils.get_logger("dellemc_vxrail_certificate_validate", "/tmp/vxrail_ansible_certificate_validate.log", log_devel=logging.DEBUG)
urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)


class VxrailClusterUrls():
    cluster_url = 'https://{}/rest/vxm'

    def __init__(self, vxm_ip):
        self.vxm_ip = vxm_ip

    def set_host(self):
        return VxrailClusterUrls.cluster_url.format(self.vxm_ip)


class VxRailCluster():
    def __init__(self):
        self.vxm_ip = module.params.get('vxmip')
        self.vc_admin = module.params.get('vcadmin')
        self.vc_password = module.params.get('vcpasswd')
        self.cert = module.params.get('cert')
        self.root_cert_chain = module.params.get('root_cert_chain')
        self.private_key = module.params.get('private_key')
        self.password = module.params.get('password')
        self.api_version_number = module.params.get('api_version_number')
        self.system_url = VxrailClusterUrls(self.vxm_ip)
        # Configure HTTP basic authorization: basicAuth
        self.configuration = vxrail_ansible_utility.Configuration()
        self.configuration.username = self.vc_admin
        self.configuration.password = self.vc_password
        self.configuration.verify_ssl = False
        self.configuration.host = self.system_url.set_host()

    # Obtains the response for the given module path with specified api_version_number or highest found version
    def get_versioned_response(self, api_instance, module_path):
        cert_info = {}
        cert_info['cert'] = self.cert
        cert_info['root_cert_chain'] = self.root_cert_chain
        cert_info['private_key'] = self.private_key
        cert_info['password'] = self.password

        # Set api version string and version number if undefined
        if self.api_version_number is None:
            self.api_version_string = utils.get_highest_api_version_string(self.vxm_ip, module_path, LOGGER)
            self.api_version_number = int(self.api_version_string.split('v')[1])
        else:
            self.api_version_string = utils.get_api_version_string(self.vxm_ip, self.api_version_number, module_path, LOGGER)

        # Calls versioned method as attribute (ex: v1_certificates_validate_post)
        call_string = self.api_version_string + '_certificates_validate_post'
        LOGGER.info("Using utility method: %s\n", call_string)
        api_cert_validate_post = getattr(api_instance, call_string)
        return api_cert_validate_post(cert_info)

    def post_certificate_validate(self):
        # create an instance of the API class
        api_instance = vxrail_ansible_utility.CertificatesApi(vxrail_ansible_utility.ApiClient(self.configuration))
        try:
            response = self.get_versioned_response(api_instance, '/certificates/validate')
        except ApiException as e:
            LOGGER.error("Exception when calling CertificatesApi->%s_certificates_validate_post: %s\n", self.api_version_string, e)
            return 'error'
        LOGGER.info("%s/certificates/validate api response: %s\n", self.api_version_string, response)
        return response


def main():
    ''' Entry point into execution flow '''
    result = ''
    global module
    # define available arguments/parameters a user can pass to the module
    module_args = dict(
        vxmip=dict(required=True),
        vcadmin=dict(required=True),
        vcpasswd=dict(required=True, no_log=True),
        cert=dict(required=True),
        root_cert_chain=dict(required=True, type='list', elements='str'),
        private_key=dict(required=False, no_log=True),
        password=dict(required=False, no_log=True),
        api_version_number=dict(type='int'),
    )

    module = AnsibleModule(
        argument_spec=module_args,
        supports_check_mode=True,
    )

    result = VxRailCluster().post_certificate_validate()
    if result == 'error':
        module.fail_json(msg="Call POST /certificates/validate API failed,"
                             "please see log file /tmp/vxrail_ansible_certificate_validate.log for more error details.")

    vx_facts = {'certificate_validate_information': "success"}
    vx_facts_result = dict(changed=False, VALIDATE_CERT_API=vx_facts, msg="Validate certificate successfully")
    module.exit_json(**vx_facts_result)


if __name__ == "__main__":
    main()
